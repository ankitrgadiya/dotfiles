# -*- mode: sh; -*-
# Begin ~/.bashrc

# Copyright 2016-2020, Ankit R Gadiya
# BSD License

# Add completion If bash is not running in compatibility mode (like
# sh)
if ! shopt -oq posix
then
	# Check various locations for bash-complation installation
	if [ -f /usr/share/bash-completion/bash_completion ]
	then
		source /usr/share/bash-completion/bash_completion
	fi
	if [ -f /usr/local/etc/bash_completion ]
	then
		source /usr/local/etc/bash_completion
	fi
	if [ -f /etc/bash_completion ]
	then
		source /etc/bash_completion
	fi

	# Homebrew (package manager) installs bash completion for various
	# commands in a specific place. The following conditional checks
	# if `brew` executable is in PATH and if so adds the completions
	# from default location for Homebrew and source them.
	if type brew &> /dev/null
	then
		__home_brew_prefix="$(brew --prefix)"
		if [[ -r "${__home_brew_prefix}/etc/profile.d/bash_completion.sh" ]]
		then
			source "${__home_brew_prefix}/etc/profile.d/bash_completion.sh"
		else
			for completion in "${__home_brew_prefix}/etc/bash_completion.d/"*
			do
				[[ -r "${completion}" ]] && source "${completion}"
			done
		fi
	fi
fi

# Starship is a unique shell agnostic prompt written in Rust. I'm trying it out,
# so I can have same prompt across shells.
eval "$(starship init bash)"

# Set the TERM variable is used by software to determine the
# capabilities of the terminal emulator. By setting it to
# `xterm-256color` I tell the software that the terminal supports 256
# colors. I use `urxvt-unicode` on Linux and Terminal.app on MacOS and
# both support colors and the following TERM settings.
export TERM=xterm-256color

# I am not sure why but apparently GPG won't work if the following
# variable is not present in environment for some reason!
export GPG_TTY=$(tty)

# Enable Vi mode which lets you use Vi like keybindings to edit the
# commands
set -o vi

# Saner history defaults
# Source: https://github.com/mrzool/bash-sensible/blob/master/sensible.bash
shopt -s histappend
shopt -s cmdhist
export PROMPT_COMMAND='history -a'
export HISTSIZE=500000
export HISTFILESIZE=100000
export HISTCONTROL="ignoreboth:erasedups"
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"
export HISTTIMEFORMAT='%F %T '

# Aliases

## Git aliases
alias gs='git status'
alias gd='git diff'
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gsl='git shortlog'
alias ga='git shortlog -s'

## Shortcuts for commands I use very frequently
alias f='free'
alias g='grep'
if type exa &> /dev/null
then
	alias l='exa'
fi
if type lf &> /dev/null
then
	alias r='lf'
fi
alias t='tmux -u'
alias u='uptime -p'
alias music='mpv --no-video --loop=inf --shuffle'

## Enable human friendly flags on the following commands
alias df='df --human'
alias du='du --human'
alias free='free --human'

## Enable interactive mode with verbose output on critical commands
alias cp='cp --interactive --verbose'
alias mv='mv --interactive --verbose'
alias rm='rm --interactive --verbose'
alias mkdir='mkdir --verbose'

## Replace commands with better alternatives
if type bat &> /dev/null
then
	alias cat='bat'
fi
if type prettyping &> /dev/null
then
	alias ping='prettyping'
fi
if type fd &> /dev/null
then
	alias find='fd'
fi
if type rg &> /dev/null
then
	alias grep='rg'
fi
if type lf &> /dev/null
then
	alias ranger='lf'
fi
if type exa &> /dev/null
then
	alias ls='exa'
fi

## Set default options
alias axel='axel -n 15 -a -k'

# Fzf is the generic fuzzy finder. It can be configured to be called
# when certain keybindings are pressed in Bash (example Reverse Search
# in Bash history). It installs a Bash file which configures that
# functionality. I source it here to enable the functionality in Bash
# use the Key-bindings
if [ -f "$HOME/.config/fzf/fzf.bash" ]
then
   source "$HOME/.config/fzf/fzf.bash"
fi
if [ -f "/usr/share/fzf/shell/key-bindings.bash" ]
then
   source "/usr/share/fzf/shell/key-bindings.bash"
fi

# Additionally, Fzf can use Tmux to display the results in separate
# pane which is quite handy. It requires the following variable to set
# for it to enable that functionality.
if [ -z $TMUX ]
then
	export FZF_TMUX=1
fi

# Customize options for Fzf keybindings
# The configured keybindings for Fzf can be configured using the
# flags. Fzf requires the specific variables to be set with the flags
# for it to recognise it. I have configured C-t which is used
# to search for files under current directory to display the file. I
# have also configured M-c which shows the direcoties to display the
# directory tree of the selected directory.
export FZF_CTRL_T_OPTS="--preview 'bat {}'"
export FZF_ALT_C_OPTS="--preview 'tree -L 1 -C {} | head -200'"

# Enable direnv hook for bash if it is installed
if type direnv &> /dev/null
then
	eval "$(direnv hook bash)"
fi

# I have some Bash functions which I keep in separate file. I source
# it here to add those functions in the Bash environment.
if [ -f "$HOME/.bash_functions" ]
then
	source "$HOME/.bash_functions"
fi

# Prepend cd to directory name
# This makes navigation easier as typing "cd" is no longer required.
shopt -s autocd

# Enable shortcuts for directories
shopt -s cdable_vars

# Shortcuts for commonly used directories
export src="$HOME/.local/src/"
export docs="$HOME/Documents/"
export downloads="$HOME/Downloads/"
export go="$HOME/.local/go/"

# Enable dircolors
eval $(dircolors ~/.dir_colors)

export GPG_TTY=$(tty)

# End ~/.bashrc
