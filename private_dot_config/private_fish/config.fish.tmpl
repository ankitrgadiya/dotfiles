# Begin ~/.config/fish/config.fish

# Copyright 2021-2022, Ankit R Gadiya
# BSD License

# vi: ft=fish

{{- if eq .chezmoi.os "darwin" }}
# Homebrew package manager requires some environment variables. This is a Fish
# compatible version of (brew shellenv).
#
# Note: These variables are updated for Apple Silicon version of Homebrew.
set -x HOMEBREW_PREFIX "/opt/homebrew"
set -x HOMEBREW_CELLAR "$HOMEBREW_PREFIX/Cellar"
set -x HOMEBREW_REPOSITORY "$HOMEBREW_PREFIX"
set -x PATH "$HOMEBREW_PREFIX/bin" "$HOMEBREW_PREFIX/sbin" $PATH
set -x MANPATH "$HOMEBREW_PREFIX/share/man" $MANPATH
set -x INFOPATH "$HOMEBREW_PREFIX/share/info" $INFOPATH

# Mac specific settings.
#
# The pre-installed coreutils in Mac are BSD version. Brew installs the GNU
# versions but prepends "g" in front of them. The symlinks exists for directly
# using the commands. The following adds the symlinks before PATH so it takes
# precedence before PATH variables.
set PATH "$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin" $PATH
set PATH "$HOMEBREW_PREFIX/opt/findutils/libexec/gnubin" $PATH
set PATH "$HOMEBREW_PREFIX/opt/gnu-sed/libexec/gnubin" $PATH
set PATH "$HOMEBREW_PREFIX/opt/ruby/bin" "$HOMEBREW_PREFIX/lib/ruby/gems/3.1.0/bin" $PATH
{{- end }}

{{- if .guix }}
# GNU GUIX is a package managed from GNU. It is implemented in GNU Guile and
# uses it for packages definitions as well. This means that package definitions
# are also Code. It strives to implement reproducible systems.

# Current User Profile
if test -L "$HOME/.guix-profile"
    set -x GUIX_PROFILE "$HOME/.guix-profile"

    if test -f "$HOME/.guix-profile/etc/profile"
        bass source "$HOME/.guix-profile/etc/profile"
    end

    if test -d "$GUIX_PROFILE/lib/locale"
        set -x GUIX_LOCPATH $GUIX_PROFILE/lib/locale
    end
end

# Current GUIX Profile
if test -L "$HOME/.config/guix/current"
    if test -f "$HOME/.config/guix/current/etc/profile"
       bass source "$HOME/.config/guix/current/etc/profile"
    end
end
{{- end }}

# Enable direnv hook for fish if it is installed
if type direnv &> /dev/null
    eval (direnv hook fish)
end

# Load Fzf Key bindingins into Fish session
{{- if eq .chezmoi.os "darwin" }}
if test -e "$HOMEBREW_PREFIX/opt/fzf/shell/key-bindings.fish"
   source $HOMEBREW_PREFIX/opt/fzf/shell/key-bindings.fish
   fzf_key_bindings
end
{{- else if eq .chezmoi.os "linux" }}
    {{- if .guix }}
if test -e "$GUIX_PROFILE/share/fish/vendor_functions.d/fzf_key_bindings.fish"
   source "$GUIX_PROFILE/share/fish/vendor_functions.d/fzf_key_bindings.fish"
   fzf_key_bindings
end
    {{- else if eq .distro "fedora" }}
if test -e "/usr/share/fzf/shell/key-bindings.fish"
   source /usr/share/fzf/shell/key-bindings.fish
   fzf_key_bindings
end
    {{- else if eq .distro "ubuntu" }}
if test -e "/usr/share/doc/fzf/examples/key-bindings.fish"
   source /usr/share/doc/fzf/examples/key-bindings.fish
   fzf_key_bindings
end
    {{- else if eq .distro "arch" }}
if test -e "/usr/share/fish/vendor_functions.d/fzf_key_bindings.fish"
   source /usr/share/fish/vendor_functions.d/fzf_key_bindings.fish
   fzf_key_bindings
end
    {{- end }}
{{- end }}

# Customize options for Fzf keybindings The configured keybindings for Fzf can
# be configured using the flags. Fzf requires the specific variables to be set
# with the flags for it to recognise it. I have configured C-t which is used to
# search for files under current directory to display the file. I have also
# configured M-c which shows the direcoties to display the directory tree of the
# selected directory.
set -x FZF_DEFAULT_COMMAND "fd -H"
set -x FZF_DEFAULT_OPTS "--color=16"
set -x FZF_CTRL_T_OPTS "--preview 'bat {}'"
set -x FZF_ALT_C_OPTS "--preview 'tree -L 1 -C {} | head -200'"

# Abbreviations!
abbr src cd ~/.local/src

# Git aliases
alias gs='git status'
alias gd='git diff'
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gsl='git shortlog'
alias ga='git shortlog -s'
alias magit='emacs-editor -e \(magit-status\)'

# Enable Human readable versions
alias df='df --human'
alias du='du --human'
alias free='free --human'

# Make 'em interactive to save your ass
alias cp='cp --interactive --verbose'
alias mv='mv --interactive --verbose'
alias rm='rm --interactive --verbose'
alias mkdir='mkdir --verbose'

# Following are the newer alternatives to some Unix tools. These aliases are
# optional and will only be enabled if the programs are present.
if type nvim &> /dev/null;
    alias vi='nvim'
    alias vim='nvim'
    alias v='nvim'
    alias nv='nvim'
end
if type bat &> /dev/null;
    alias cat='bat'
end
if type prettyping &> /dev/null;
    alias ping='prettyping'
end
if type fd &> /dev/null;
    alias find='fd'
end
if type rg &> /dev/null;
    alias grep='rg'
end
if type lf &> /dev/null;
    alias ranger='lf'
end
if type lazygit &> /dev/null;
    alias lg='lazygit'
end
if type exa &> /dev/null;
    alias ls='exa'
end

# Enable default download options for Axel
alias axel='axel -n 15 -a -k'

# Enable Docker BuildKit
set -x DOCKER_BUILDKIT 1

# I use Emacs for editing text files. Emacs can also be configured to
# work in Client-Server fashion which means reduced time for launching
# client. Emacs 26+ (atleast on Debian) also comes with a user service
# (systemd) to run Emacs daemon automatically. However, if the daemon
# is not running the desirable result is to start a daemon and connect
# to it as client. I had some trouble in past where some command was
# not accepting flags in the $EDITOR variable and so the client was
# not working. So, I wrapped up the logic described in a simple shell
# script. I am using it as EDITOR now.
set -x EDITOR "emacs-editor"
set -x VISUAL "emacs-visual"

# I <3 Vi key-bindings.
fish_vi_key_bindings

# Prompt
if type starship &> /dev/null;
   starship init fish | source
end

# Bat Settings
set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"
set -x MANROFFOPT "-c"

# Enable dircolors
bass (dircolors ~/.dir_colors)

# Add local directories to the Path
set -x PATH $HOME/.local/bin $PATH
set -x MANPATH $HOME/.local/share/man:$MANPATH

# Programming Languages

# Deno configuration
set -x PATH $PATH "$HOME/.deno/bin"

# Elixir configuration
set -x PATH $PATH "$HOME/.mix/escripts"

# Luarocks configuration
set -x LUA_PATH_5_4 "/usr/share/lua/5.4/?.lua"
set -x LUA_PATH_5_4 "$LUA_PATH_5_4;/usr/share/lua/5.4/?/init.lua"
set -x LUA_PATH_5_4 "$LUA_PATH_5_4;/usr/local/share/lua/5.4/?.lua"
set -x LUA_PATH_5_4 "$LUA_PATH_5_4;/usr/local/share/lua/5.4/?/init.lua"
set -x LUA_PATH_5_4 "$LUA_PATH_5_4;$HOME/.luarocks/share/lua/5.4/?.lua"
set -x LUA_PATH_5_4 "$LUA_PATH_5_4;$HOME/.luarocks/share/lua/5.4/?/init.lua"
set -x LUA_PATH_5_4 "$LUA_PATH_5_4;./?.lua;./?/init.lua"

set -x LUA_CPATH_5_4 "/usr/share/lib/lua/5.4/?.so;/usr/share/local/lib/5.4/?.so"
set -x LUA_CPATH_5_4 "$LUA_CPATH_5_4;$HOME/.luarocks/lib/lua/5.4/?.so"

# Golang configurations
{{- if eq .machine "work" }}
set -x GOPRIVATE "bitbucket.org/rapyutians,github.com/rapyuta-robotics"
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
set -x GOROOT "$HOMEBREW_PREFIX/opt/golang/libexec"
{{- else if eq .distro "fedora" }}
set -x GOROOT "/usr/lib/golang"
{{- else if eq .distro "arch" }}
set -x GOROOT "/usr/lib/go"
{{- end }}

{{- if eq .machine "work" }}
set -x GOPROXY "direct"
{{- else }}
set -x GOPROXY "https://proxy.golang.org,direct"
{{- end }}

set -x GO111MODULE "auto"
set -x GOPATH $HOME/.local/go
set -x PATH $GOROOT/bin $GOPATH/bin $PATH

# Assign appropriate TTY for GPG
set -x GPG_TTY (tty)

# End ~/.config/fish/config.fish
