#!/usr/bin/env fish

# Copyright 2021, Ankit R Gadiya
# BSD License

# arg is a command-line utility inspired by tpope's dotfiles.

function usage
    echo "Usage: arg <command> [<args>]"
    echo "Supported commands:"
    echo -e "\tgit          - configure git profile"
    echo -e "\tnvim,vim,vi  - neovim session"
    echo -e "\tshrt         - url shortener"
    echo -e "\tsearch       - search"
    echo -e "\ttmux-capture - captures visible words in Tmux pane"
end

# tmux-capture is a command to capture any word from the selected pane and
# insert it in the active pane inside Tmux. This is bound to prefix+tab key in
# Tmux.
function tmux-capture
	set -l panes  (tmux list-pane | string collect)
	set -l active (command echo $panes | grep "active" | awk -v FS=":" '{print $1}')
	set -l target (command echo $panes | fzf --layout=reverse | awk -v FS=":" '{print $1}')
	set -l data (command tmux capture-pane -p -t "$target" | fmt -1 | tr -d "[:blank:]" | fzf --layout=reverse)
	if test "$data" == ""
		tmux set-buffer -b arg-tc "$data"
		tmux paste-buffer -b arg-tc -t "$active"
	end
end

# search is a command to open a new tab in the browser with search query in the
# selected search engine.
function search -a engine
    set -l engine
    if test -z "$engine"
        set engine (command surfraw -elvi | grep -v 'LOCAL|GLOBAL' | fzf -e -i --info=default --layout=reverse | awk '{print $1}')
    end

    set -l keyword (command echo | fzf --print-query --prompt="query: " --layout=reverse)
    open (command surfraw -p "$engine" "$keyword")
end

# popup is used to run any arg sub-command in a Tmux popup.
# It passes its arguments to the arg program.
# +helper
function popup
    # Check if we are inside the Tmux Session
    if test -n TERM_PROGRAM
        tmux display-popup -E "arg $argv[1..]"
    else
        echo 'This command only works inside Tmux'
    end
end

# shrt is a command for my Go link URL shortener.
# No args: it will list all the existing Go links.
# 1 arg  : it will create a Go link with auto-incrementing ID.
# 2 arg  : it will create a named Go link with the provided alias
function shrt -a url path
    set -l token (command cloudflared access token -app=https://argv.in/api)
    if test (count $argv) -eq 0
        http GET https://argv.in/api/urls/ "cf-access-token:$token" |
            jq -r ".routes[] | [.name, .url] | @sh" |
            awk -v FS="'" 'BEGIN{printf("%30s | %-120s\n", "PATH", "URL");printf("%30s | %-120s\n", "====", "===")};{printf("%30s | %-120s\n",$2, substr($4, 1, 120))}'
        return
    end
    set -l output (command http POST "https://argv.in/api/url/$path" "cf-access-token:$token" "url=$url")
    if test (command echo $output | jq -r .ok) = true
        set -l route (command echo $output | jq -r .route.name)
        echo "https://argv.in/$route"
    end
end

# gitconfig sets the User config for the current Git repository.
function gitconfig -a profile
    git status >/dev/null 2>&1
    if test $status -ne 0
        echo "not a git repository"
        return
    end

    switch $profile
        case home personal
            git config user.email "git@argp.in"
            git config user.signkey 3A25137FB8A87C77C5EAC226322DB2D680BAFB16
        case work rapyuta
            git config user.email "ankit.gadiya@rapyuta-robotics.com"
            git config user.signkey 8C56990BFCA0F5209FF5A3026572A8682F35C253
        case "*"
            echo "profile not present"
    end
end

# nvim-open is an proxy for opening neovim. It checks if the session file
# (managed by vim-obsession plugin) exists in the current directory.
function nvim-open
    if test (count $argv) -gt 0
        nvim $argv
    else
        if test -e Session.vim
            nvim -S
        else
            nvim
        end
    end
end


if test (count $argv) -eq 0
    usage
else
    switch $argv[1]
        case "vi*" "nvi*"
            nvim-open $argv[2..]
        case git
            gitconfig $argv[2..]
        case shrt
            shrt $argv[2..]
        case search
            search $argv[2..]
        case popup
            popup $argv[2..]
        case tmux-capture
            tmux-capture $argv[2..]
        case "*"
            usage
    end
end

# vi: ft=fish
